name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  security-events: write

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/devops-portfolio-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/devops-portfolio-frontend

jobs:
  lint:
    name: Lint Dockerfiles
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Lint Backend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: app/backend/Dockerfile
          ignore: DL3008,DL3009,DL3018,DL3059
          failure-threshold: error

      - name: Lint Frontend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: app/frontend/Dockerfile
          ignore: DL3008,DL3009,DL3018,DL3059
          failure-threshold: error

  build-backend:
    name: Build & Test Backend
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create backend metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push Backend (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: app/backend
          file: app/backend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha,scope=backend
          cache-to: type=gha,mode=max,scope=backend

      - name: Test Backend container
        run: |
          docker pull ${{ env.BACKEND_IMAGE }}:${{ github.ref_name }}
          docker run -d --name test-backend -p 8000:8000 \
            ${{ env.BACKEND_IMAGE }}:${{ github.ref_name }}
          
          echo "Waiting for backend to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:8000/api/greeting; then
              echo "Backend is healthy!"
              break
            fi
            echo "Attempt $i/30..."
            sleep 2
          done
          
          docker logs test-backend
          docker stop test-backend
          docker rm test-backend

      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.BACKEND_IMAGE }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'backend-trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Backend Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'backend-trivy-results.sarif'
          category: 'backend-container'

  build-frontend:
    name: Build & Test Frontend
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push Frontend (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: app/frontend
          file: app/frontend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,mode=max,scope=frontend

      - name: Test Frontend container
        run: |
          docker pull ${{ env.FRONTEND_IMAGE }}:${{ github.ref_name }}
          docker run -d --name test-frontend -p 8080:80 \
            ${{ env.FRONTEND_IMAGE }}:${{ github.ref_name }}
          
          echo "Waiting for frontend to be ready..."
          for i in {1..30}; do
            if curl -f http://localhost:8080/; then
              echo "Frontend is healthy!"
              break
            fi
            echo "Attempt $i/30..."
            sleep 2
          done
          
          docker logs test-frontend
          docker stop test-frontend
          docker rm test-frontend

      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.FRONTEND_IMAGE }}:${{ github.ref_name }}
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Frontend Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'frontend-trivy-results.sarif'
          category: 'frontend-container'

  summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [build-backend, build-frontend]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## ðŸš€ CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Images Published:" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: \`${{ env.BACKEND_IMAGE }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: \`${{ env.FRONTEND_IMAGE }}:${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY