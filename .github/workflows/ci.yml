name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  security-events: write

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/devops-portfolio-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/devops-portfolio-frontend

jobs:
  ci-pipeline:
    name: Full CI/CD Pipeline
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Lint Backend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: app/backend/Dockerfile
          ignore: DL3008,DL3009,DL3018,DL3059
          failure-threshold: warning
      
      - name: Lint Frontend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: app/frontend/Dockerfile
          ignore: DL3008,DL3009,DL3018,DL3059
          failure-threshold: warning

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract Backend metadata (Multi-tagging)
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and Load Backend image for Testing/Scanning
        id: build-backend-test
        uses: docker/build-push-action@v5
        with:
          context: app/backend
          push: false 
          load: true 
          tags: ${{ env.BACKEND_IMAGE }}:${{ github.sha }} 
          platforms: linux/amd64 
          cache-from: type=gha,name=backend-cache
          cache-to: type=gha,mode=max,name=backend-cache

      - name: Test Backend container
        run: |
          TAG=${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          docker run -d --name test-backend \
            -e NODE_ENV=production \
            -e API_PORT=8000 \
            -p 8000:8000 \
            $TAG
          
          sleep 10
          
          timeout 30 bash -c 'until curl -f http://localhost:8000/api/greeting; do echo "Waiting for backend..."; sleep 2; done'
          
          echo "Backend test successful"
          docker stop test-backend
          docker rm test-backend
      
      - name: Run Trivy vulnerability scanner - Backend
        id: trivy-backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          format: 'sarif'
          output: 'backend-trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true
      
      - name: Upload Backend Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.trivy-backend.outcome == 'success'
        with:
          sarif_file: 'backend-trivy-results.sarif'
          category: 'backend-container'
          
      - name: Publish Backend image (multi-platform)
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: docker/build-push-action@v5
        with:
          context: app/backend
          push: true
          load: false 
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha,name=backend-cache

      - name: Extract Frontend metadata (Multi-tagging)
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and Load Frontend image for Testing/Scanning
        id: build-frontend-test
        uses: docker/build-push-action@v5
        with:
          context: app/frontend
          push: false 
          load: true 
          tags: ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          platforms: linux/amd64
          cache-from: type=gha,name=frontend-cache
          cache-to: type=gha,mode=max,name=frontend-cache

      - name: Test Frontend container
        run: |
          TAG=${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          docker run -d --name test-frontend \
            -p 3000:80 \
            $TAG
          
          sleep 10
          
          timeout 30 bash -c 'until curl -f http://localhost:3000/; do echo "Waiting for frontend..."; sleep 2; done'
          
          echo "Frontend test successful"
          docker stop test-frontend
          docker rm test-frontend
      
      - name: Run Trivy vulnerability scanner - Frontend
        id: trivy-frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          format: 'sarif'
          output: 'frontend-trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true
      
      - name: Upload Frontend Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.trivy-frontend.outcome == 'success'
        with:
          sarif_file: 'frontend-trivy-results.sarif'
          category: 'frontend-container'

      - name: Publish Frontend image (multi-platform)
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: docker/build-push-action@v5
        with:
          context: app/frontend
          push: true
          load: false 
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha,name=frontend-cache

      - name: Job Summary
        run: |
          echo "## Published Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Backend Images:" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.meta-backend.outputs.tags }}' | while read -r tag; do
            [[ -n "$tag" ]] && echo "- $tag" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Images:" >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.meta-frontend.outputs.tags }}' | while read -r tag; do
            [[ -n "$tag" ]] && echo "- $tag" >> $GITHUB_STEP_SUMMARY
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Images are ready for deployment!" >> $GITHUB_STEP_SUMMARY