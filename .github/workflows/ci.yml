name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  packages: write
  security-events: write

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/devops-portfolio-backend
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/devops-portfolio-frontend

jobs:
  ci-cd:
    name: Full CI/CD Pipeline (Multi-Arch)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Lint Backend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: app/backend/Dockerfile
          ignore: DL3008,DL3009,DL3018,DL3059
          failure-threshold: warning

      - name: Lint Frontend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: app/frontend/Dockerfile
          ignore: DL3008,DL3009,DL3018,DL3059
          failure-threshold: warning

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create backend metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.BACKEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push Backend (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: app/backend
          file: app/backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha,name=backend-cache
          cache-to: type=gha,mode=max,name=backend-cache

      - name: Pull Backend image for test
        run: docker pull ${{ env.BACKEND_IMAGE }}:latest

      - name: Test Backend container (amd64)
        run: |
          docker run -d --name test-backend -p 8000:8000 ${{ env.BACKEND_IMAGE }}:latest
          echo "Waiting for backend to be ready..."
          for i in {1..30}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/api/greeting || echo "000")
            if [ "$STATUS" == "200" ]; then
              echo "Backend ready!"
              break
            fi
            sleep 2
          done
          docker logs test-backend || true
          docker stop test-backend || true
          docker rm test-backend || true

      - name: Trivy scan - Backend (docker image)
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ github.workspace }}:/workspace \
            aquasecurity/trivy:0.33.0 image \
            --format sarif --output backend-trivy-results.sarif --severity CRITICAL,HIGH \
            ${{ env.BACKEND_IMAGE }}:latest
        continue-on-error: true

      - name: Ensure backend SARIF exists
        run: test -f backend-trivy-results.sarif || touch backend-trivy-results.sarif

      - name: Upload Backend SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: backend-trivy-results.sarif
          category: backend-container

      - name: Create frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FRONTEND_IMAGE }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build & Push Frontend (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: app/frontend
          file: app/frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha,name=frontend-cache
          cache-to: type=gha,mode=max,name=frontend-cache

      - name: Pull Frontend image for test
        run: docker pull ${{ env.FRONTEND_IMAGE }}:latest

      - name: Test Frontend container (amd64)
        run: |
          docker run -d --name test-frontend -p 8080:80 ${{ env.FRONTEND_IMAGE }}:latest
          echo "Waiting for frontend to be ready..."
          for i in {1..30}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/ || echo "000")
            if [ "$STATUS" == "200" ]; then
              echo "Frontend ready!"
              break
            fi
            sleep 2
          done
          docker logs test-frontend || true
          docker stop test-frontend || true
          docker rm test-frontend || true

      - name: Trivy scan - Frontend (docker image)
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v ${{ github.workspace }}:/workspace \
            aquasecurity/trivy:0.33.0 image \
            --format sarif --output frontend-trivy-results.sarif --severity CRITICAL,HIGH \
            ${{ env.FRONTEND_IMAGE }}:latest
        continue-on-error: true

      - name: Ensure frontend SARIF exists
        run: test -f frontend-trivy-results.sarif || touch frontend-trivy-results.sarif

      - name: Upload Frontend SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: frontend-trivy-results.sarif
          category: frontend-container

      - name: Job Summary
        run: |
          echo "## CI/CD Multi-Arch Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "Backend tags: ${{ steps.meta-backend.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "Frontend tags: ${{ steps.meta-frontend.outputs.tags }}" >> $GITHUB_STEP_SUMMARY